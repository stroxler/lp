ll2=lapply(ll, function(x) { x ** 2 })
ll2=sapply(ll, function(x) { x ** 2 })
ll2
class(ll2)
m = cbind(c(1, 2), c(8, 9))
m
vapply(m, function(x) { x**2 }, numeric(1))
install.packages('matlab')
library(lattice)
setwd("~/lp/R/islr/")
system("curl www-bcf.usc.edu/~gareth/ISL/Auto.csv")
setwd("~/lp/R/islr/")
system("curl www-bcf.usc.edu/~gareth/ISL/Auto.csv")
auto <- tbl_df(read.csv("Auto.csv", stringsAsFactors=FALSE, header=T, na.strings="?"))
str(auto)
auto <- na.omit(auto)
str(auto)
library(ggplot2)
library(dplyr)
library(magrittr)
auto <- tbl_df(read.csv("Auto.csv", stringsAsFactors=FALSE, header=T, na.strings="?"))
str(auto)
auto <- na.omit(auto)
str(auto)
pairs(auto)
pairs(âˆ¼ mpg + displacement + horsepower + weight +          acceleration, auto)
pairs(~ mpg + displacement + horsepower + weight +          acceleration, auto)
auto
pairs(auto, ~ mpg + displacement + horsepower + weight +          acceleration)
pairs(auto, ~ mpg + displacement + horsepower + weight + acceleration)
names(auto)
pairs(auto, ~ mpg + displacement + horsepower + weight + acceleration)
?pairs
lattice::splom(auto)
warnings()
lattice::splom(select(auto, -name))
identify(auto$horsepower, auto$mpg, name)
identify(auto$horsepower, auto$mpg, auto$name)
plot(auto$horsepower, auto$mpg)
identify(auto$horsepower, auto$mpg, auto$name)
attach(auto)
plot(horespower, mpg)
identify(horespower, mpg, name)
attach(auto)
plot(horsepower, mpg)
identify(horsepower, mpg, name)
name
str(auto)
plot(cylinders)
?sample
?shuffle
??shuffle
?sample
sample(1:5)
plot(cylinders)
plot(sample(cylinders)
)
set.seed(42)
plot(sample(cylinders)
)
set.seed(42)
plot(sample(cylinders)
)
str(auto)
summary(origin)
origin
cbind(origin, names)
rbind(origin, names)
rbind(as.character(origin), name)
mapply(origin, names, list)
mapply(origin, name, list)
mapply(list, origin, name)
mapply(list, origin, name)
library(plyr)
l_ply(mapply(list, origin, name), print)
l_ply(mapply(list, origin, name), function(ll) { print(sprintf("%l %s", ll[[1]], ll[[2]]))})
l_ply(mapply(list, origin, name), function(ll) { print(sprintf("%l %s", ll[[1]], ll[[2]]))})
l_ply(mapply(list, origin, name), function(ll) { print(browser(), sprintf("%l %s", ll[[1]], ll[[2]]))})
ll
mapply(list, origin, name)
class(mapply(list, origin, name))
onpairs = mapply(list, origin, name)
onpairs
dim(onpairs)
onpairs = mapply(list, origin, name)
dim onpairs
onpairs = mapply(list, origin, name, SIMPLIFY = FALSE)
onpairs
l_ply(onpairs, function(ll) { print(sprintf("%d %s", ll[[1]], ll[[2]]))})
output. But if you have a big monitor and run this interactively, you can see a lot of patterns.)
l_ply(onpairs, function(ll) { print(sprintf("%d %s", ll[[1]], ll[[2]]))})
on_pairs = mapply(auto$origin, auto$name, function(o, n) list(o = o, n = n))
on_pairs = mapply(function(o, n) list(o = o, n = n), auto$origin, auto$name)
pair_to_string = function(pair) sprintf("%d %s", pair$o, pair$n)
plyr::l_ply(on_pairs[:10], function(pair) { print(pair_to_string(pair)) })
plyr::l_ply(on_pairs[1:10], function(pair) { print(pair_to_string(pair)) })
SIMPLIFY = FALSE)
on_pairs = mapply(function(o, n) list(o = o, n = n), auto$origin, auto$name,
SIMPLIFY = FALSE)
pair_to_string = function(on_pair) sprintf("%d %s", pair$o, pair$n)
plyr::l_ply(on_pairs[1:10], function(pair) { print(pair_to_string(pair)) })
pair_to_string = function(pair) sprintf("%d %s", pair$o, pair$n)
on_pairs = mapply(function(o, n) list(o = o, n = n), auto$origin, auto$name,
SIMPLIFY = FALSE)
pair_to_string = function(pair) sprintf("%d %s", pair$o, pair$n)
plyr::l_ply(on_pairs[1:10], function(pair) { print(pair_to_string(pair)) })
on_pairs = mapply(function(o, n) list(o = o, n = n), auto$origin, auto$name,
SIMPLIFY = FALSE)
pair_to_string = function(pair) sprintf("%d %s", pair$o, pair$n)
plyr::l_ply(sample(on_pairs, 10), function(pair) { print(pair_to_string(pair)) })
on_pairs = mapply(function(o, n) list(o = o, n = n), auto$origin, auto$name,
SIMPLIFY = FALSE)
pair_to_string = function(pair) sprintf("%d %s", pair$o, pair$n)
plyr::l_ply(sample(on_pairs, 15), function(pair) { print(pair_to_string(pair)) })
set.seed(42)
on_pairs = mapply(function(o, n) list(o = o, n = n), auto$origin, auto$name,
SIMPLIFY = FALSE)
pairs_to_print = sample(on_pairs, 15)
pair_to_string = function(pair) sprintf("%d %s", pair$o, pair$n)
plyr::l_ply(pairs_to_print, function(pair) { print(pair_to_string(pair)) })
set.seed(30)
on_pairs = mapply(function(o, n) list(o = o, n = n), auto$origin, auto$name,
SIMPLIFY = FALSE)
pairs_to_print = sample(on_pairs, 15)
pair_to_string = function(pair) sprintf("%d %s", pair$o, pair$n)
plyr::l_ply(pairs_to_print, function(pair) { print(pair_to_string(pair)) })
select(auto, origin, name)
select(auto, origin, name)
select(auto, origin, name) %>% sample(15)
select(auto, origin, name) %>% sample(15)
select(auto, origin, name) %>%
)
?sample
auto %>% sample_n(15) %>% select(auto, origin)
auto %>% sample_n(15) %>% select(origin, name)
str(auto)
auto %>% select(weight, horsepower, mpg)
auto %>% select(weight, horsepower, mpg)
?select
auto %>% select(origin, weight, horsepower, mpg) %>% mutate(region = function(o) {}(origin))
?switch
switch(2, 2 = "me")
map_origin_to_label <- function(origin_ordinal) {
if      (origin == 1) { "North America" }
else if (origin == 2) { "Europe" }
else if (origin == 3) { "Asia" }
else NA
}
map_origin_to_label(5)
map_origin_to_label <- function(origin_ordinal) {
if      (origin_ordinal == 1) { "North America" }
else if (origin_ordinal == 2) { "Europe" }
else if (origin_ordinal == 3) { "Asia" }
else NA
}
map_origin_to_label(5)
map_origin_to_label(3)
map_origin_to_label(2)
origin_to_region <- function(origin_ordinal) {
if      (origin_ordinal == 1) { "North America" }
else if (origin_ordinal == 2) { "Europe" }
else if (origin_ordinal == 3) { "Asia" }
else NA
}
auto1 <- auto
%>% select(origin, horsepower, mpg, weight)
%>% transmute(region = origin_to_region(origin))
origin_to_region <- function(origin_ordinal) {
if      (origin_ordinal == 1) { "North America" }
else if (origin_ordinal == 2) { "Europe" }
else if (origin_ordinal == 3) { "Asia" }
else NA
}
auto1 <- (auto %>% select(origin, horsepower, mpg, weight)
%>% transmute(region = origin_to_region(origin)))
auto1
origin_to_region <- function(origin_ordinal) {
if      (origin_ordinal == 1) { "North America" }
else if (origin_ordinal == 2) { "Europe" }
else if (origin_ordinal == 3) { "Asia" }
else NA
}
auto1 <- (auto %>% select(origin, horsepower, mpg, weight)
%>% mutate(region = origin_to_region(origin)))
?transmute
origin_to_region <- function(origin) {
region = character(NA, length(origin))
region[origin == 1] = "North America"
region[origin == 2] = "Europe"
region[origin == 3] = "Asia"
}
auto1 <- (auto %>% select(origin, horsepower, mpg, weight)
%>% mutate(region = origin_to_region(origin)))
region[] = NA
origin_to_region <- function(origin) {
region = character(length(origin))
region[] = NA
region[origin == 1] = "North America"
region[origin == 2] = "Europe"
region[origin == 3] = "Asia"
}
auto1 <- (auto %>% select(origin, horsepower, mpg, weight)
%>% mutate(region = origin_to_region(origin)))
auto1
summarize(auto1$region)
str(auto1)
auto1$region
origin
region = character(length(origin))
region
region[] = NA
region
origin == 1
region[origin == 1] = "North America"
region
origin_to_region <- function(origin) {
region <- character(length(origin))
region[] <- NA
region[origin == 1] <- "North America"
region[origin == 2] <- "Europe"
region[origin == 3] <- "Asia"
region
}
auto1 <- (auto %>% select(origin, horsepower, mpg, weight)
%>% mutate(region = origin_to_region(origin)))
auto1
str(auto1)
auto1$region
qplot(auto1$region)
?select_n
??select_n
??sample_n
sample()
sample(1:9)
?sample_n
sample_n(auto1)
sample_n(auto1, length(auto1))
sample_n(auto1, length(auto1))
sample_n(auto1, length(auto1))
sample_n(auto1, length(auto1))
sample_n(auto1, length(auto1))
library(class)
?knn.cv
?knn
normalize <- function(x) { (x - mean(x)) / sd(x)}
auto_n = auto_1 %>% transmute(horsepower_n = normalize(horsepower)
mpg_n = normalize(mpg),
weight_n = normalize(weight))
normalize <- function(x) { (x - mean(x)) / sd(x) }
auto_n = auto_1 %>% transmute(horsepower_n = normalize(horsepower),
mpg_n = normalize(mpg),
weight_n = normalize(weight))
auto1 <- (auto %>% select(origin, horsepower, mpg, weight)
%>% mutate(region = origin_to_region(origin))
%>% sample_n(length(auto)))
normalize <- function(x) { (x - mean(x)) / sd(x) }
auto_n = auto_1 %>% transmute(horsepower_n = normalize(horsepower),
mpg_n = normalize(mpg),
weight_n = normalize(weight))
normalize <- function(x) { (x - mean(x)) / sd(x) }
auto_n = auto1 %>% transmute(horsepower_n = normalize(horsepower),
mpg_n = normalize(mpg),
weight_n = normalize(weight))
auto_n
auto1
?transmute
auto1 <- (auto %>% select(region = origin_to_region(origin), horsepower, mpg, weight)
%>% sample_n(length(auto)))
auto1 <- (auto %>% select(origin, horsepower, mpg, weight)
%>% mutate(region = origin_to_region(origin))
%>% select(-origin)
%>% sample_n(length(auto)))
auto1
auto_n = auto1 %>% transmute(region = region,
horsepower_n = normalize(horsepower),
mpg_n = normalize(mpg),
weight_n = normalize(weight))
auto_n
?knn
dim(auto_n)
auto1 <- (auto %>% select(origin, horsepower, mpg, weight)
%>% mutate(region = origin_to_region(origin))
%>% select(-origin)
%>% sample_n(nrow(auto)))
auto_n = auto1 %>% transmute(region = region,
horsepower_n = normalize(horsepower),
mpg_n = normalize(mpg),
weight_n = normalize(weight))
dim(auto_n)
train = 1:(nrow(auto_n)/2)
test = (nrow(auto_n)/2):nrow(auto_n)
train
test
knn.cv(as.matrix(select(auto_n, -region)), auto_n$region)
model = knn.cv(as.matrix(select(auto_n, -region)), auto_n$region)
?knn.cv
?knn.cv
?knn
tr_X <- as.matrix(select(auto_tr, -region))
ts_X <- as.matrix(select(auto_tr, -region))
tr_Y <- auto_tr$region
ts_Y <- auto_tr$region
estimate_knn_accuracy <- function(k) {
yhat = knn(train = tr_X, test = ts_X, cl = tr_Y, k = k)
return mean(yhat == ts_Y)
}
plyr::aaply(1:20, estimate_knn_accuracy)
train <- 1:(nrow(auto_n)/2)
test <- (nrow(auto_n)/2):nrow(auto_n)
auto_tr <- auto_n[train]
auto_ts <- auto_n[test]
tr_X <- as.matrix(select(auto_tr, -region))
ts_X <- as.matrix(select(auto_tr, -region))
tr_Y <- auto_tr$region
ts_Y <- auto_tr$region
estimate_knn_accuracy <- function(k) {
yhat = knn(train = tr_X, test = ts_X, cl = tr_Y, k = k)
return mean(yhat == ts_Y)
}
plyr::aaply(1:20, estimate_knn_accuracy)
auto_tr
auto_ts
train <- 1:(nrow(auto_n)/2)
test <- (nrow(auto_n)/2):nrow(auto_n)
train
test
auto_tr <- auto_n[train]
auto_ts <- auto_n[test]
auto_tr
auto_tr <- auto_n[train,]
auto_ts <- auto_n[test,]
auto_tr
tr_X <- as.matrix(select(auto_tr, -region))
ts_X <- as.matrix(select(auto_tr, -region))
tr_Y <- auto_tr$region
ts_Y <- auto_tr$region
estimate_knn_accuracy <- function(k) {
yhat = knn(train = tr_X, test = ts_X, cl = tr_Y, k = k)
return mean(yhat == ts_Y)
}
plyr::aaply(1:20, estimate_knn_accuracy)
tr_X <- as.matrix(select(auto_tr, -region))
ts_X <- as.matrix(select(auto_tr, -region))
tr_Y <- auto_tr$region
ts_Y <- auto_tr$region
estimate_knn_accuracy <- function(k) {
yhat = knn(train = tr_X, test = ts_X, cl = tr_Y, k = k)
mean(yhat == ts_Y)
}
plyr::aaply(1:20, estimate_knn_accuracy)
plyr::aaply
??plyr::aaply
?plyr::aaply
plyr::aaply(1:20, 1, estimate_knn_accuracy)
yhat = knn(train = tr_X, test = ts_X, cl = tr_Y, k = 1)
ts_Y
yhat
yhat == ts_Y
yhat = tr_Y
yhat = knn(train = tr_X, test = ts_X, cl = tr_Y, k = 1)
yhat == tr_Y
train
test
tr_Y == ts_Y
tr_X <- as.matrix(select(auto_tr, -region))
ts_X <- as.matrix(select(auto_ts, -region))
tr_Y <- auto_tr$region
ts_Y <- auto_ts$region
estimate_knn_accuracy <- function(k) {
yhat = knn(train = tr_X, test = ts_X, cl = tr_Y, k = k)
mean(yhat == ts_Y)
}
plyr::aaply(1:20, 1, estimate_knn_accuracy)
qplot(accuracy)
tr_X <- as.matrix(select(auto_tr, -region))
ts_X <- as.matrix(select(auto_ts, -region))
tr_Y <- auto_tr$region
ts_Y <- auto_ts$region
estimate_knn_accuracy <- function(k) {
yhat = knn(train = tr_X, test = ts_X, cl = tr_Y, k = k)
mean(yhat == ts_Y)
}
ks = 1:20
accuracy = plyr::aaply(ks, 1, estimate_knn_accuracy)
qplot(ks, accuracy)
?qplot
qplot(accuracy, geom=line)
qplot(accuracy, geom=geom_line())
qplot(ks, accuracy, geom=geom_line())
qplot(ks, accuracy, geom=geom_line
qplot(ks, accuracy, geom=geom_line)
qplot(ks, accuracy, geom=geom_line)
qplot(ks, accuracy, geom="line")
?knn.cv
X = as.matrix(select(auto_n, -region))
y = auto_n$region
estimate_knn_accuracy <- function(k) {
yhat <- knn.cv(train = X, cl = y, k = k)
mean(yhat == y)
ks <- 1:20
accuracy <- plyr::aaply(ks, 1, estimate_knn_accuracy)
qplot(ks, accuracy, geom="line") coefs[1:nrow(auto_n)]
X = as.matrix(select(auto_n, -region))
y = auto_n$region
estimate_knn_accuracy_cv <- function(k) {
yhat <- knn.cv(train = X, cl = y, k = k)
mean(yhat == y)
ks <- 1:20
accuracy <- plyr::aaply(ks, 1, estimate_knn_accuracy_cv)
qplot(ks, accuracy, geom="line") coefs[1:nrow(auto_n)]
X = as.matrix(select(auto_n, -region))
y = auto_n$region
estimate_knn_accuracy_cv <- function(k) {
yhat <- knn.cv(train = X, cl = y, k = k)
mean(yhat == y)
ks <- 1:20
accuracy <- plyr::aaply(ks, 1, estimate_knn_accuracy_cv)
qplot(ks, accuracy, geom="line")
X = as.matrix(select(auto_n, -region))
y = auto_n$region
estimate_knn_accuracy_cv <- function(k) {
yhat <- knn.cv(train = X, cl = y, k = k)
mean(yhat == y)
}
ks <- 1:20
accuracy <- plyr::aaply(ks, 1, estimate_knn_accuracy_cv)
qplot(ks, accuracy, geom="line")
library(FNN)
help(package="FNN")
?knn.reg
str(auto_n)
?knn
?knn.reg
knn.cv
?knn.cv
?knn.reg
y_tr <- auto1[train,]$mpg
y_ts <- auto1[test,]$mpg
X_tr <- as.matrix(select(auto_tr, -region, -horsepower_n))
X_ts <- as.matrix(select(auto_ts, -region, -horsepower_n))
estimate_knn_sse <- function(k) {
out <- knn.reg(train = X_tr, test = X_ts, y = y_tr, k = k)
mean((out$pred - y_ts) ** 2)
}
ks <- 1:20
sse <- plyr::aaply(ks, 1, estimate_knn_sse)
qplot(ks, sse, geom="line")
install.packages(learningr)
install.packages("learningr)
)
""
)
)))
""""
install.packages("learningr")
plain_text_path <- system.file("extdata",
"Shakespear's The Tempest, from Progect Gutenberg pg2235.txt",
package="learningr")
the_tempest <- readLines(plain_text_path)
the_tempest[1000:1001]
plain_text_path <- system.file("extdata",
+                                "Shakespear's The Tempest, from Progect Gutenberg pg2235.txt",
+                                package="learningr")
plain_text_path <- system.file("extdata",
"Shakespear's The Tempest, from Progect Gutenberg pg2235.txt",
package="learningr"
)
plain_text_path
plain_text_path <- system.file("extdata",
"Shakespear's The Tempest, from Project Gutenberg pg2235.txt",
package="learningr")
the_tempest <- readLines(plain_text_path)
the_tempest[1000:1001]
plain_text_path <- system.file("extdata",
"Shakespeare's The Tempest, from Project Gutenberg pg2235.txt",
package="learningr")
the_tempest <- readLines(plain_text_path)
the_tempest[1000:1001]
library(learningr)
help(package="learningr")
plain_text_path <- system.file("extdata",
"Shakespeare's The Tempest, from Project Gutenberg pg2235.txt",
package="learningr")
the_tempest <- readLines(plain_text_path)
setwd("~/lp/R/learningr/")
plain_text_path <- system.file("extdata",
"Shakespeare's The Tempest, from Project Gutenberg pg2235.txt",
package="learningr")
my_text <- readLines("a_plain_text_file.txt")
my_text
?writeLines
library(XML)
xml_path <- system.file("extdata", "options.xml", package="learningr")
r_options <- XML::xmlParse(xml_path)
r_options
class(r_options)
as.data.frame(r_options)
as.list(r_options)
r_options <- XML::xmlParse(xml_path, useInternalNodes = FALSE)
r_options
xml_path <- system.file("extdata", "options.xml", package="learningr")
r_options <- XML::xmlParse(xml_path)
# can't use str(r_options) / head(r_options)
r_options <- XML::xmlParse(xml_path, useInternalNodes = FALSE)
str(r_options)
head(r_options)
xml_path <- system.file("extdata", "options.xml", package="learningr")
r_options <- XML::xmlParse(xml_path)
# can't use str(r_options) / head(r_options)
r_options <- XML::xmlParse(xml_path, useInternalNodes = FALSE)
str(r_options)
head(r_options)
